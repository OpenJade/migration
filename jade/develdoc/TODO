* Allow different options for spec parser and doc parser ?

Things which are missing and need a lot of work
===============================================

* query: leads to current-node not being an element node.

* char-script-case: this should be handled by the backends.

* baseset-encoding, literal-described-char, other-chars: 
  must abandon SP_CHARSET_FIXED to do this, since otherwise
  SP does unwanted conversions on numeric char refs. On the
  other hand, we do want SP_CHARSET_FIXED, if we are using
  jades builtin repertoire (ie Unicode). Since Char is only
  16bit, have to map other-chars in the private area somewhere
  and tell the user/backend about it.
  
* combine-char: If we do this, we can't do character translation
  as a map char --> char any longer, but instead have to deal
  with string --> string.

* Annex K #ALL/#IMLICIT content tokens. Implementation idea: At the 
  begin of the instance and after seeing a new implicit element type 
  in the instance, go over all definitions and recompile the model 
  groups. Also adjust the inclusions/exclusions. Optimization: recompile 
  only those which actually use #ALL/#IMPLICIT.

* check table-auto-width and multi-process features.

* An XSLFO backend ? Would try to approximate the DSSSL FOT into an XSLFO
  document. Then we could take advantage of existing XSL formatters. We could
  also drop JadeTeX in favor of PassiveTeX (when it gets ready) then.

* TeXFOTBuilder: Only output Start/EndNode pairs for nodes actually referred to
  (see RtfFOTBuilder).

* Do page feature in the front-end.

* TeX backend: Implement general indirect FOs by outputting relevant info from
  a TeX run and reading that info in the next OJ run.

Simple things
=============

* Concur: Forbit name groups in parameter entity references in 
  document type specifications in tags.

* install ports, ICs, etc only in SL Interpreters.

* Perhaps split InterpreterMessages into InterpreterMessages and 
  SchemeParserMessages (and more...). 

* Set up framework for I18N: generating .po from .msg, po/OpenXYZ.pot from ../*.po,
  generate and install .mo files. See GNU gettext Makefile.in.in.

* Remove FOTBuilder::characters(const Vector<CharacterNIC> &) and instead add
  a procedure that lets the backend query character properties for a Char
  array. Makes storing parts of the FOT more efficient (otherwise,
  SaveFOTBuilder will have to store the NIC Vectors, for example.)
  Should be done before next release.

* A way for backends to declare/access extension character properties.
  (Not needed until we have a backend that actually would do this.)

* Validation of extension flow objects. (Not very important, since the backends
  can handle these special cases without major effort.) Instead we could add a
  FOTBuilder::FOMessage() non-virtual, so that backends may produce consistent
  error messages without knowing about ProcessContext internals.

Things which have to be added to the jade internals documentation
=================================================================

*  writing backends.

*  scheme primitives: special meaning of partIndex == unsigned(-1),
   (define internal: ...), (define feature: foo ...).

*  language stuff.

*  feature checking.

*  grove plan checking.

*  color spaces.

*  char repertoire stuff.

* messages: module stuff, message numbers 

Reorganization
==============

* move the generated config.h files to toplevel.

* clean up the mess of SP_ defines:
 
  replace many SP_ defines by their more `standard' automake
  names (see the bottom of acconfig.h)

  replace SP_ANSI_LIB by HAVE_NEW / HAVE_CASSERT
