AC_REVISION([$Id$])
dnl
dnl  Process this file with autoconf to produce a configure script.
dnl
dnl  Copyright (C) 1998 Cees A. de Groot, 1999 Matthias Clasen
dnl

dnl
dnl  Credits: this autoconf script was largely "inspired" <g> by the
dnl  autoconf script around SP made by Henry Thompson.
dnl
AC_INIT(dsssl)
AM_CONFIG_HEADER(style/config.h)
AC_CONFIG_AUX_DIR(config)
AM_INIT_AUTOMAKE(OpenJade, 1.4)
AM_SANITY_CHECK
missing_dir=`cd $ac_aux_dir && pwd`

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB
AC_PATH_PROGS(PERL, perl, perl)
AM_PROG_LIBTOOL

dnl Checks for libraries.
AC_CHECK_LIB(pthread,pthread_create,,AC_CHECK_LIB(threads,cthread_fork))

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADER(limits.h)

dnl Checks for typedefs, structures and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_STRUCT_ST_BLKSIZE
AC_CACHE_CHECK(for sig_atomic_t in signal.h,
    ac_cv_have_sig_atomic_t,
    AC_TRY_LINK([#include <signal.h>],sig_atomic_t x;,
        ac_cv_have_sig_atomic_t=yes,
        ac_cv_have_sig_atomic_t=no))
if test "$ac_cv_have_sig_atomic_t" = "no"
then
    AC_CHECK_TYPE(sig_atomic_t,int)
fi
AC_CHECK_SIZEOF(size_t)
AC_CHECK_SIZEOF(unsigned int)
AC_CHECK_SIZEOF(unsigned short)
AC_CHECK_SIZEOF(wchar_t)
AC_CXX_BOOL
AC_LANG_CPLUSPLUS
AC_CHECK_SIZEOF(bool)
AC_CXX_NEW_FOR_SCOPING
AC_CXX_DYNAMIC_CAST
AC_CXX_NAMESPACES
AC_CXX_EXPLICIT_INSTANTIATIONS
if test "$GXX"
then
  AC_CACHE_CHECK(whether GNU C++ supports automatic template instantiation,
	         ac_cv_c_gnu_automatic_templates,
                 AC_EGREP_CPP(yes,[
#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 8)
  yes
#endif
	],AC_MSG_RESULT(yes)
            AC_DEFINE(SP_DEFINE_TEMPLATES),
          AC_MSG_RESULT(no)
            AC_DEFINE(SP_MANUAL_INST)
            CXXFLAGS="$CXXFLAGS -fno-implicit-templates"))
fi
AC_CACHE_CHECK(whether new_handler accepts size_t and returns int,
ac_cv_cxx_fancy_new_handler,
[AC_LANG_SAVE
 AC_LANG_CPLUSPLUS
 AC_TRY_COMPILE([
#include <stddef.h>
#include <new.h>
int oom(size_t) { }],[set_new_handler(oom);],
   ac_cv_cxx_fancy_new_handler=yes,
   ac_cv_cxx_fancy_new_handler=no)
 AC_LANG_RESTORE
])
if test "$ac_cv_cxx_fancy_new_handler" = yes; then
  AC_DEFINE(SP_FANCY_NEW_HANDLER)
fi

dnl FIXME these need tests 
AC_DEFINE(SP_SET_NEW_HANDLER_EXTERN_C)
AC_DEFINE(SP_ANSI_LIB)
AC_DEFINE(SP_NO_STD_NAMESPACE)
dnl AC_DEFINE(SP_QUAL_TEMPLATE_DTOR_BROKEN)
dnl AC_DEFINE(SP_DECLARE_PLACEMENT_OPERATOR_NEW)
dnl AC_DEFINE(SP_HAVE_PLACEMENT_OPERATOR_DELETE)

dnl Checks for library functions.
AC_REPLACE_FUNCS(memcmp)
AC_CHECK_FUNCS(setlocale)

dnl Checks for system services.

dnl Package options.
AC_ARG_PROGRAM
AC_DEFINE_UNQUOTED(DEFAULT_SCHEME_BUILTINS,"$prefix/share/$PACKAGE/builtins.dsl")
AC_DEFINE(SP_MULTI_BYTE)
AC_MSG_CHECKING(whether to run the grove builder in a separate thread)
AC_ARG_ENABLE(threads,
changequote(<,>)dnl
<  --enable-threads        run grove builder in a separate thread [default=no]>,
changequote([,])dnl
  [if test "$enableval" != "no"; then
    AC_DEFINE(USE_THREADS)
    AC_MSG_RESULT(yes)
  else 
    AC_MSG_RESULT(no)
  fi],
  AC_MSG_RESULT(no))
AC_MSG_CHECKING(whether to build the Framemaker MIF backend)
AC_ARG_ENABLE(mif,
changequote(<,>)dnl
<  --enable-mif            build the FrameMaker MIF backend [default=yes]>,
changequote([,])dnl
  [if test "$enableval" = "yes"; then
    AC_DEFINE(JADE_MIF)
    AC_MSG_RESULT(yes)
  else 
    AC_MSG_RESULT(no)
  fi],
  AC_DEFINE(JADE_MIF)
  AC_MSG_RESULT(yes))
AC_MSG_CHECKING(whether to build the HTML+CSS backend)
AC_ARG_ENABLE(html,
changequote(<,>)dnl
<  --enable-html           build the HTML+CSS backend [default=yes]>,
changequote([,])dnl
  [if test "$enableval" = "yes"; then
    AC_DEFINE(JADE_HTML)
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
  fi],
  AC_DEFINE(JADE_HTML)
  AC_MSG_RESULT(yes))

AC_SUBST(LIBOBJS)
AC_OUTPUT(Makefile style/Makefile grove/Makefile spgrove/Makefile
	  jade/Makefile dsssl/Makefile jadedoc/Makefile 
	  jadedoc/images/Makefile)
