dnl
dnl  configure.in
dnl
AC_REVISION($Id$)
dnl
dnl  Process this file with autoconf to produce a configure script.
dnl
dnl  Copyright (C) 1998 Cees A. de Groot
dnl

dnl
dnl  Credits: this autoconf script was largely "inspired" <g> by the
dnl  autoconf script around SP made by Henry Thompson.
dnl

AC_INIT(pubtext)
AC_CONFIG_AUX_DIR(config)
AC_ARG_PROGRAM
AM_INIT_AUTOMAKE(OpenSP, 1.4)
AM_SANITY_CHECK
missing_dir=`cd $ac_aux_dir && pwd`

dnl
dnl  Check for programs
dnl
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB
AC_PROG_MAKE_SET
AC_PATH_PROGS(PERL, perl, perl)
AM_PROG_LIBTOOL

dnl
dnl  Checks for header files.
dnl
AC_HEADER_STDC
AC_CHECK_HEADERS(limits.h)

dnl
dnl  Checks for typedefs, structures, and compiler characteristics.
dnl
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_STRUCT_ST_BLKSIZE
AC_CACHE_CHECK(for sig_atomic_t in signal.h,
    ac_cv_have_sig_atomic_t,
    AC_TRY_LINK([#include <signal.h>],sig_atomic_t x;,
	ac_cv_have_sig_atomic_t=yes,
	ac_cv_have_sig_atomic_t=no))
if test "$ac_cv_have_sig_atomic_t" = "no"
then
    AC_CHECK_TYPE(sig_atomic_t,int)
fi

AC_CHECK_SIZEOF(size_t)
AC_CHECK_SIZEOF(unsigned int)

dnl
dnl the following tests require c++, not c; note that if you switch this
dnl earlier, AC_C_CONST will fail, at least
dnl
AC_LANG_CPLUSPLUS

AC_CACHE_CHECK(support for bool,
    ac_cv_typedef_bool,
    AC_TRY_LINK(,bool x; x=(false | true);,
       	ac_cv_typedef_bool=yes,
	ac_cv_typedef_bool=no))
if test "$ac_cv_typedef_bool" = "yes"
then
    AC_DEFINE(SP_HAVE_BOOL)
fi

dnl
dnl  Checks for library functions.
dnl 
AC_REPLACE_FUNCS(memmove strerror strtoul)

AC_CHECK_FUNC(setlocale,AC_DEFINE(SP_HAVE_LOCALE))
AC_CHECK_FUNC(gettext,AC_DEFINE(SP_HAVE_GETTEXT),
  AC_CHECK_LIB(intl,gettext,AC_DEFINE(SP_HAVE_GETTEXT) LIBS="$LIBS -lintl"))

dnl
dnl Check for thread support.
dnl
AC_CHECK_LIB(threads,cthread_fork,LIB_THREADS="-lthreads",LIB_THREADS="")
AC_SUBST(LIB_THREADS)

dnl 
dnl  ANSI templates
dnl
AC_CACHE_CHECK(for ANSI template instantiation,
               ac_cv_c_template_ansi,
               AC_TRY_LINK([
class foo {
};

template<class T> class test {
public:
 T *data();};
template class test<foo>;
],,ac_cv_c_template_ansi=yes,
   ac_cv_c_template_ansi=no))
if test "$ac_cv_c_template_ansi" = "yes"
 then
  AC_DEFINE(SP_ANSI_CLASS_INST)
fi

dnl
dnl  HTTP support
dnl
AC_MSG_CHECKING(wether to include support for http)
AC_ARG_ENABLE(http,
[  --enable-http          include support for http],
    if test $enableval
    then
        AC_MSG_RESULT(yes)
	AC_DEFINE(SP_HAVE_SOCKET)
	AC_CHECK_LIB(nsl,main,LIBS="$LIBS -lnsl")
	AC_CHECK_LIB(socket,main,LIBS="$LIBS -lsocket")
	AC_MSG_CHECKING(h_errno in netdb.h)
	AC_EGREP_HEADER(h_errno,netdb.h,
	    AC_MSG_RESULT(yes),
	    AC_DEFINE(SP_DECLARE_H_ERRNO)
	    AC_MSG_RESULT(no))
    else
        AC_MSG_RESULT(no)
    fi,
    AC_MSG_RESULT(no))

dnl 
dnl  Other options
dnl
AC_DEFINE(SP_MULTI_BYTE)

AC_MSG_CHECKING(for default catalog)
AC_ARG_ENABLE(default-catalog,
[  --enable-default-catalog=pathlist
                          provide one or more default catalog files or
                          sysids, e.g. /usr/local/lib/sgml/catalog],
              if test $enableval
               then
                AC_MSG_RESULT($enableval)
                AC_DEFINE_UNQUOTED(SGML_CATALOG_FILES_DEFAULT,"$enableval")
               else
                AC_MSG_RESULT(none)
              fi,
              AC_MSG_RESULT(none))

AC_MSG_CHECKING(for default search path)
AC_ARG_ENABLE(default-search-path,
[  --enable-default-search-path=pathlist
                          provide a default value for SGML_SEARCH_PATH],
    if test $enableval
    then
        AC_MSG_RESULT($enableval)
	AC_DEFINE_UNQUOTED(SGML_SEARCH_PATH_DEFAULT,"$enableval")
    else
        AC_MSG_RESULT(none)
    fi,
    AC_MSG_RESULT(none))

AC_OUTPUT(Makefile lib/Makefile nsgmls/Makefile spent/Makefile 
	spam/Makefile sgmlnorm/Makefile sx/Makefile spcat/Makefile
	include/Makefile generic/Makefile doc/Makefile pubtext/Makefile)

