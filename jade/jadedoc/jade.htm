<!-- -*- sgml -*- -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<title>Jade - James' DSSSL Engine</title>
<body bgcolor="#ffffff">
<h1>Jade - James' DSSSL Engine</h1>

<h2>Contents</h2>
<UL>
<LI><A HREF="#whatis">What is Jade?</A>
<LI><A HREF="#copyright">Copyright</A>
<LI><A HREF="#getting">Getting Jade</A>
<LI><A HREF="#building">Building Jade</A>
<UL>
<LI><A HREF="#building-win32">Win32</A>
<LI><A HREF="#building-unix">Unix</A>
</UL>
<LI><A HREF="#using">Using Jade</A>
<LI><A HREF="#extensions">Jade Extensions</A>
<LI><A HREF="#limitations">Current Jade Limitations</A>
<LI><A HREF="#backends">Backends</A>
<UL>
<LI><A HREF="#backend-rtf">RTF</A>
<LI><A HREF="#backend-fot">SGML Flow Object Tree</A>
<LI><A HREF="#backend-html">HTML</A>
<LI><A HREF="TeX.htm">TeX</A>
</UL>
<LI><A HREF="#source">Reading the Jade Sources</A>
<LI><A HREF="#bugs">Reporting Bugs in Jade</A>
<LI><A HREF="#contribute">Contributing to Jade</A>
</UL>

<h2><A NAME=whatis>What is Jade?</A></h2>
<p>
Jade is an implementation of the DSSSL style language.
The current version is 0.3, which is the first beta version.
<p>
For general information about DSSSL, see my <a
href="http://www.jclark.com/dsssl/">DSSSL page</A>.
<p>
Jade includes the following components:
<UL>
<LI>
An abstract interface to groves.
This is designed to be implementable on top of a database,
in addition to simple in-memory implementations.
<P>
The source is in the grove directory.
<LI>
An in-memory implementation of this interface built with SP.
<P>
This is
multi-threaded (on Win32 only at the moment): the grove can be
accessed before it is complete and access to a property of a node will
block until that property becomes available.
This allows the style engine to produce output before
it has read all the document.
<P>
The source is in the spgrove directory.
<LI>
A style engine that implements the DSSSL style language.  This depends
on the grove interface, but not the spgrove implementation of that
interface.  It depends on SP for the parsing of DSSSL specifications.
The style engine relies on a backend to actually do the formatting.
The backend interface is designed to accomodate browsers as well as
command-line applications, but it does not currently provide
interfaces that would allow for editing either of SGML documents or
DSSSL specs.
<P>
The source is in the style directory.
<LI>
A command-line application, <CODE>jade</CODE>, that combines the style
engine with the spgrove grove interface and four backends:
<UL>
<LI>
A backend that generates an SGML representation of the flow
object tree.  The DTD for the SGML generated is in
<CODE>jade/fot.dtd</CODE>.
<LI>
A backend that generates RTF.  This has been tested with
Microsoft Word for Windows 95.  It also works with Microsoft's
free <A
HREF="ftp://ftp.microsoft.com/softlib/mslfiles/WD95VW71.EXE">Word
Viewer 7.1</A> (note that this supports importing RTF, but the
earlier version included with Windows 95 does not).
<LI>
A backend that generates TeX.  Although the C++ part of this is almost
complete, much work remains to be done on writing the TeX macros on which the
generated TeX code depends. (This backend was contributed by
<a href="mailto:dmeggins@uottawa.ca">David Megginson</a>.)
<LI>
A backend that generates HTML. This isn't a real backend in that it
cannot generate reasonable HTML using a normal DSSSL style-sheet.
However it provides a way to use the style engine to generate HTML.
</UL>
<P>
The source is in the jade directory.
</UL>

<h2><A NAME=copyright>Jade Copyright</A></h2>
<p>
Jade is licensed under the same <A HREF="copying.txt">terms</A> as SP.  This
imposes almost no restrictions even for commercial use.
<P>
If you do use Jade in a commercial product, I would ask you, as a
courtesy, to let me know about it and acknowledge the use of Jade.

<h2><A NAME=getting>Getting Jade</A></h2>
<p>
If you're using Windows 95 or Windows NT, then you all you need is in the <A
HREF="ftp://ftp.jclark.com/pub/jade/jadew0_3.zip">binary distribution</A>.
<P>
Otherwise you will need to build it yourself from source. You need
<ul>
<li>
the sources for <A HREF="ftp://ftp.jclark.com/pub/jade/jade0_3.zip">Jade</A>,
and
<li>
the sources for <A
HREF="ftp://ftp.jclark.com/pub/sp/sp-1.1.1.tar.gz">SP 1.1.1</A>,
if you don't already have them.
</ul>
<p>
Unpack SP first, then unpack jade.zip file in the
<CODE>sp-1.1.1</CODE> directory that was created by unpacking SP.  The
files in jade.zip use CRLF delimited lines, so use unzip -a to unpack
on Unix.  On Windows you must use an unzip that preserves long
filenames, such as WinZip 6.1.

<h2><A NAME=building>Building Jade</A></h2>

<h3><A NAME=building-win32>Win32</A></h3>
<p>
Only Microsoft Visual C++ 4.2 is supported.  It worked with 4.1 last
time I tried, but it's only been tested with 4.2.
<p>
Open SP.mak as a makefile and build at least the
<code>lib - UnicodeDebug</code> and <code>lib - UnicodeRelease</code>
configurations.
<P>
Then open jade.mak as a makefile and build the jade configurations.
<P>
With the debug configuration the DLLs and EXEs end up in the
lib\UnicodeDebug directory;
with the release configuration they end up in the bin directory.

<h3><A NAME=building-unix>Unix</A></h3>
<p>
Only gcc 2.7.2 is supported (2.6.3 and 2.7.1 may also work; don't use 2.7.0).
<p>
Building on Unix is tested irregularly, so be prepared
to fix build glitches (typically the fix involves adding some template
instantiations).
<p>
You'll need a Makefile that supports the <code>include</code> directive.
<p>
Build with <code>make -f Makefile.jade</code>.  Note that jade
requires an SP compiled with <CODE>-DSP_MULTI_BYTE</CODE>.  If you
plan to do any development, also do <code>make -f Makefile.jade
depend</code>.

<h2><A NAME=using>Using Jade</A></h2>
<P>
Add the directory containing the jade binary to your path,
change directory to the dsssl directory, and do
<pre>
jade demo.sgm
nsgmls -s demo.fot
</pre>
<P>
If everything is working, you shouldn't get any errors.
<P>
Jade supports the following options
in addition to the normal SP options:
<DL>
<DT>
<CODE>-d <VAR>dsssl_spec</VAR></CODE>
<DD>
This specifies that <CODE><VAR>dsssl_spec</VAR></CODE> is the
DSSSL specification to be used;
<CODE><VAR>dsssl_spec</VAR></CODE> must be an SGML document
conforming to the DSSSL architecture.
For an example, see <CODE>dsssl/demo.dsl</CODE>.
If the <CODE>-d</CODE>
option is not specified, jade will expect to find the DSSSL
specification in <CODE><VAR>file</VAR>.dsl</CODE>
for an SGML document <CODE><VAR>file</VAR>.sgm</CODE>.
<DT>
<CODE>-t <VAR>output_type</VAR></CODE>
<DD>
<CODE><VAR>output_type</VAR></CODE> specifies the type of output as follows:
<DL COMPACT>
<DT>
<CODE>fot</CODE>
<DD>
An SGML representation of the flow object tree
<DT>
<CODE>rtf</CODE>
<DD>
Microsoft's Rich Text Format
<DT>
<CODE>html</CODE>
<DD>
Hypertext Markup Language
<DT>
<CODE>tex</CODE>
<DD>
TeX
</DL>
<DT>
<CODE>-o <VAR>output_file</VAR></CODE>
<DD>
Write output to <CODE><VAR>output_file</VAR></CODE> instead of
the default.
The default filename is the name of the last input file with its
extension replaced by the name of the type of output.
If there is no input filename, then the extension is added onto
<CODE>jade-out</CODE>.
<P>
With HTML output more than one output file will be created.
The name of the first will be <CODE><VAR>output_file</VAR></CODE>;
the names of the others will be created by adding
a serial number before the extension, if any, on
<CODE><VAR>output_file</VAR></CODE>.
<DD>
<DT>
<CODE>-V <VAR>variable</VAR></CODE>
<DD>
This is equivalent to doing
<PRE>
(define <VAR>variable</VAR> #t)
</PRE>
except that this definition will take priority over any definition of
<VAR>variable</VAR> in a style-sheet.
</DL>

<h2><A NAME="extensions">Jade Extensions</A></h2>
<p>
The following external procedures are available.  These external
procedures are defined by a prototype in the same manner as in the
standard.  To use one of these external procedures, you must make use
of the standard <code>external-procedure</code> procedure, using a
public identifier of <code>"UNREGISTERED::James
Clark//Procedure::<var>name</var>"</code> where
<code><var>name</var></code> is the name given here, typically by
including the following in the DSSSL specification:
<pre>
(define <var>name</var>
  (external-procedure "UNREGISTERED::James Clark//Procedure::<var>name</var>"))
</pre>
<p>
Note that <code>external-procedure</code> returns <code>#f</code> if
it doesn't know about the specified public identifier.  You can use
this to enable your DSSSL specifications to work gracefully with other
implementations which do not support these extensions.

<h3>Debugging</h3>

<pre>
(debug <var>obj</var>)
</pre>
<p>
Generates a message including the value of <code><var>obj</var></code> and
then returns <code><var>obj</var></code>.

<h3>Simple-page-sequence header/footer control</h3>

<pre>
(if-first-page <var>sosofo1</var> <var>sosofo2</var>)
</pre>
<p>
This can be used only in the specification of the value of one of the
header/footer characteristics of simple-page-sequence.  It returns a
sosofo that will display as <code><var>sosofo1</var></code> if the
page is the first page of the simple-page-sequence and as
<code><var>sosofo2</var></code> otherwise.

<pre>
(if-front-page <var>sosofo1</var> <var>sosofo2</var>)
</pre>
<p>
This can be used only in the specification of the value of one of the
header/footer characteristics of simple-page-sequence.  It returns a
sosofo that will display as <code><var>sosofo1</var></code> if the
page is a front (ie recto, odd-numbered) page and as
<code><var>sosofo2</var></code> if it is a back (ie verso,
even-numbered) page

<h2><A NAME="limitations">Current Jade Limitations</A></h2>
<p>
This section describes the limitations of the front-end (the general-purpose
DSSSL engine): each backend also has its own limitations.
<P>
Only the DSSSL Online subset of DSSSL is implemented
with the following additions (all part of full DSSSL)
<UL>
<LI>lambda (including #!key)
<LI>let, letrec, let* and named let
<LI>node-list-first
<LI>node-list-rest
<LI>children (argument restricted to optional singleton node-list)
<LI>descendants (argument restricted to optional singleton node-list)
<LI>attributes (argument restricted to optional singleton node-list)
<LI>data
<LI>select-elements
<LI>node-list-no-order
<LI>node-list=?
<LI>node-list?
<LI>named-node-list?
<LI>named-node
<LI>process-node-list
<LI>node-list-address (argument restricted to a singletion node-list)
</UL>
<P>
Note that only inherited characteristics that are applicable to some
DSSSL Online flow object can be specified.

<h3>Character/glyph handling</h3>
<P>
It only supports a single pre-defined character repertoire.  A
character name of the form <CODE>U-<VAR>XXXX</VAR></CODE> where
<CODE><VAR>XXXX</VAR></CODE> are four upper-case hexadecimal digits,
is recognized as referring to the Unicode character with that code.
For many characters, it is also
possible to use the ISO/IEC 10646 name in lower-case with words
separated by hyphens.
<P>
Some common SDATA entity names from the ISO entity sets are recognized
and mapped to characters.  In addition an SDATA entity name of the
form <CODE>U-<VAR>XXXX</VAR></CODE>, where
<CODE><VAR>XXXX</VAR></CODE> are four upper-case hexadecimal digits,
is mapped to the Unicode character with that code.
<P>
Jade does not make use of any of the declaration architectural forms
related to characters and glyphs.
<P>
Jade assumes your SGML document character set is Unicode (or a subset
of Unicode such ISO/IEC 8859-1).
<P>
The following style language declarations (as well as the non-DSSSL
Online declarations) are ignored:
<PRE>
declare-char-characteristic+property
declare-char-property
add-char-properties
define-language
declare-default-language
</PRE>

<h3>Validation</h3>
<P>
Several things that it would be desirable to have checked aren't
checked:
<ul>
<li>
When the allowed value of an inherited characteristic is a
symbol, jade checks only that the value is a symbol that is
allowed as the value of some characteristic; #t and #f are
treated as a special kind of symbol in this case.
<li>
Jade doesn't check whether a flow object is occurring in a context
where it is allowed.
<li>
Jade does not prevent flow objects being attached to the
principal port of a flow object when the flow object shouldn't
have a principal port.
<li>
Most type-checking is done at run-time not compile-time.
<li>
Jade does not check for non-inherited characteristics that are
required to be specified.
<li>
It doesn't check that optionals features that have been used were
declared in the features form.
</ul>

<h3>Other limitations</h3>
<P>
The following primitives are just stubs:
<DL>
<DT>
<CODE>char-script-case</CODE>
<DD>
Always returns last argument.
<DT>
<CODE>char-property</CODE>
<DD>
Always returns #f or specified default value.
<DT>
<CODE>address-visited?</CODE>
<DD>
Always returns #f.
</DL>


<h2><A NAME=backends>Backends</A></h2>
<h3><A NAME=backend-rtf>RTF backend</A></h3>
<P>
Only the following flow object classes are implemented:
<DL>
<DT>
<CODE>sequence</CODE>
<DT>
<CODE>character</CODE>
<DT>
<CODE>paragraph</CODE>
<DT>
<CODE>paragraph-break</CODE>
<DT>
<CODE>line-field</CODE>
<DD>
Only at the beginning of a paragraph.
<DT>
<CODE>display-group</CODE>
<DT>
<CODE>simple-page-sequence</CODE>
<DT>
<CODE>score</CODE>
<DD>
Only type <CODE>after</CODE> and <CODE>through</CODE>
<DT>
<CODE>rule</CODE>
<DD>
Only horizontal orientation.
Rules only show up in Page Layout View.
<DT>
<CODE>box</CODE>
<DD>
Changing indentation inside a box will not work.
<DT>
<CODE>leader</CODE>
<DD>
The content of the flow object is ignored: a dotted leader will always be
used.  The specified length is ignored: it always fills out the line.
<DT>
<CODE>external-graphic</CODE>
<DT>
<CODE>link</CODE>
<DD>
Only destinations that are single elements in the same document.
<DT>
<CODE>table</CODE>
<DT>
<CODE>table-part</CODE>
<DT>
<CODE>table-column</CODE>
<DD>
The table-auto-width feature isn't properly supported:
it's not really possible in RTF.
<DT>
<CODE>table-row</CODE>
<DT>
<CODE>table-cell</CODE>
<DT>
<CODE>table-border</CODE>
</DL>
<P>
Many DSSSL characteristics cannot be implemented in RTF.
The backend does the best it can.
<P>
In order to get correct page numbers in Microsoft Word, type the
following after opening the document:
<ol>
<li>CTRL+END
<li>CTRL+A
<li>F9
</ol>
<P>
The RTF backend supports some additional characteristics.  To
use a characteristic named here as <CODE><VAR>C</VAR></CODE>, declare
it using <CODE>declare-characteristic</CODE> with the public
identifier:
<PRE>
"UNREGISTERED::James Clark//Characteristic::<VAR>C</VAR>"
</PRE>
These characteristics are all applicable to simple-page-sequence:
<DL>
<DT>
<CODE>page-number-format</CODE>
<DD>
Value is a string as for
format-number procedure.  This controls the format of the number used
by page-number-sosofo and current-page-number-sosofo for references to
pages in the simple-page-sequence.  The initial value is <CODE>"1"</CODE>.
<DT>
<CODE>page-number-restart?</CODE>
<DD>
Value is a boolean.  If true, then
for the purposes of page-number-sosofo and current-page-number-sosofo,
the page numbers for this simple-page-sequence will restart from 1.
The initial value is <CODE>#f</CODE>.
<DT>
<CODE>page-n-columns</CODE>
<DD>
Value is a strictly positive integer, specifying the number of columns.
The initial value is 1.
<DT>
<CODE>page-column-sep</CODE>
<DD>
Value is a length, specifying the separation between columns.
The initial value is <CODE>.5in</CODE>.
<DT>
<CODE>page-balance-columns?</CODE>
<DD>
Value is a boolean.  If true, the columns on the final page of the
page-sequence should be balanced.  The initial value is <CODE>#f</CODE>.
</DL>

<h3><A NAME=backend-fot>SGML Flow Object Tree backend</A></h3>
<p>
Most non-inherited characteristics for the character flow object
aren't reported.

<h3><A NAME=backend-html>HTML backend</A></h3>
<P>
The HTML backend does not attempt to implement the semantics of
most DSSSL flow objects in HTML.  The widely deployed HTML browsers
are not yet powerful enough for this.  When support for CSS is more
widespread this may be possible.
<P>
Instead the HTML backend provides an application-defined flow object
class that allows a DSSSL specification to specify the HTML markup
to be used.  This flow object class can be declared as follows:
<PRE>
(declare-flow-object-class formatting-instruction
  "UNREGISTERED::James Clark//Flow Object Class::formatting-instruction")
</PRE>
<P>
This class has a single non-inherited characteristic <CODE>data:</CODE>
which specifies a string to be inserted into HTML output.  The string
will be inserted without change into the output.  Note that when
character flow objects are output, occurrences of the characters
<CODE>&lt;&gt;&amp;</CODE>
are translated into the appropriate entity references.
For example, the following would map an <CODE>XMP</CODE> source element
onto an HTML <CODE>PRE</CODE> element:
<PRE>
(element XMP
  (sosofo-append
    (make formatting-instruction
          data: "&lt;PRE>")
    (process-children)
    (make formatting-instruction
          data: "&lt;/PRE>")))
</PRE>
<P>
Obviously, procedures can be used to make this more convenient.
<P>
Note that this construction rule would typically need to be enclosed
in a CDATA marked section to ensure that the PRE start- and end-tags
are not recognized during the SGML parse of the style sheet.
<P>
Each scroll flow object is mapped onto a separate
HTML document.
<strong>Any flow objects not inside a scroll flow object will
produce no output.</strong>
<P>
The HTML backend implements a few other flow objects and
characteristics.  The link flow object is mapped onto an
<CODE>A</CODE> element with an <CODE>HREF</CODE> attribute.  The
backend will automatically insert the corresponding <CODE>A</CODE>
elements with <CODE>NAME</CODE> attributes.  A paragraph flow object
is mapped onto a <CODE>DIV</CODE> element.  The
<CODE>font-posture:</CODE>, <CODE>font-weight:</CODE>,
<CODE>color:</CODE> and <CODE>quadding:</CODE> are also automatically
mapped to the appropriate HTML markup.
<P>
The HTML backend also implements the application defined characteristic
with public identifier:
<PRE>
"UNREGISTERED::James Clark//Characteristic::scroll-title"
</PRE>
<P>
This applies to the scroll flow object and specifies a string to be
used as the content of the <CODE>TITLE</CODE> element of the
corresponding HTML document.  Note that the HTML backend generates the
<CODE>HTML</CODE> and <CODE>BODY</CODE> elements automatically, so the
formatting-instruction flow object cannot be used to get markup inside
the HTML <CODE>HEAD</CODE> element.

<h2><A NAME=source>Reading the Jade Sources</A></h2>
<P>
Start with the following headers:
<PRE>
grove/Node.h
style/FOTBuilder.h
style/StyleEngine.h
</PRE>

<h2><A NAME=bugs>Reporting Bugs in Jade</A></h2>
<P>
If you find a bug in Jade, please take the time to report it.  If Jade
crashes on any input whatever, that's a bug and I want to hear about
it.  If Jade fails to process a specification that conforms to the
DSSSL standard in the manner required by the DSSSL standard in a way
that is not documented here as a current limitation nor is documented
in my list of <A HREF="http://www.jclark.com/dsssl/errata.htm">DSSSL errata</A>, that's a
bug and I want to hear about it.
<p>
Please report bugs by email to me, <A
href="mailto:jjc@jclark.com"><CODE>jjc@jclark.com</CODE></A>.  Do not
post them to comp.text.sgml nor to the sp-prog list.
<p>
I do not want to get bug reports about documented limitations, so
please read the list of limitations carefully.  However, feel free to
let me know which of the current limitations you would most like to
see addressed.
<p>
I also at this stage do not want to hear about bugs in your C++
compiler that prevent it from compiling Jade: if your compiler refuses
to compile Jade, I want to hear about it only if
<UL>
<LI>
it is because the Jade source code fails to conform to the current
ANSI C++ draft in some way, or
<LI>
you have a clean, simple and portable workaround for your compiler's
bug.
</UL>
<P>
Before reporting a bug, please check that your snapshot is current.
<P>
<strong>The most important thing in reporting a bug is to include a
complete set of files on which I can run jade and reproduce the
problem</strong>.  Also tell me what command line I should use, and
what is incorrect about the behaviour of jade.  If the files are large
package them up as a tar or zip file and upload them to
ftp://ftp.jclark.com/incoming.
<P>
It is useful if you have a fix for a bug, but please don't delay
sending in the bug while you work on a fix and don't send in a fix
without giving me the files to reproduce the bug it fixes.

<h2><A NAME=contribute>Contributing to Jade</A></h2>
<p>
Here are some ways you can contribute to Jade:
<UL>
<LI>
Send in good bug reports.
<LI>
Write DSSSL style sheets for popular DTDs.
People are already working on style sheets for HTML, TEI and Docbook.
<LI>
Write another backend.  I would like to see the following backends:
<UL>
<LI>
MIF
<LI>
groff/troff (I'll probably do this)
<LI>
Plain text
<LI>
PostScript
<LI>
Windows browser
</UL>
<LI>
Write some more documentation.
<LI>
Create a test suite.
</UL>
<p>
<ADDRESS>
<A HREF="mailto:jjc@jclark.com">James Clark</A>
</ADDRESS>
