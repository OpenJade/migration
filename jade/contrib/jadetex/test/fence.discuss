Problem with \FenceSerial

According to the DSSSL spec the open and close ports of the fence flow
object accept only character flow objects, and current openjade
enforces that (at least it does not accept a string at these ports).

The complete character flow objects end up in arguments #3 and #4 of
\FenceSerial. jadetex does not treat these complete complete character
flow objects in its arguments very well: errors occur and wrong
symbols appear as the fences. Looking at the jadetex code, I see that
arguments #3 and #4 are expected to be a delimiter character.

The attached files fence.dsl and fence.sgml illustrate the
problem. (Any sgml file would do; the style sheet constructs the
output without referring to the sgml file.)

The problem is really that jadetex should interpret the character in
the flow object as a delimiter. I have only been able to achieve that
by inserting \left and \right right in front of the character within
the definition of \Character. That has led me to the code in
fencechar.tex. Note that I removed the test \ifnum#1<255 since
\left\char#1 does not work (one should have \left\delimiter
7-bits-delimiter-code).

This solution leaves one problem: In principle the open and close
ports of fence accept any character. The above code only accepts
characters that have a delimiter code in TeX. Other characters get a
TeX error, and a space appears before the right delimiter. One could
set up a more elaborate scheme in which a test is done on whether the
character is a delimiter, and if not, do \left.\char#2. One way to do
this is to define something like del!123 for delimiter \char123, and
test for it. Disadvantage: in this scheme the set of delimiters is
hard coded in jadetex, and does not respond to new delimiter
definitions a user might make for a certain font. I do not know of a
way to test if a delimitercode is defined.
